package gen;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class matriz implements org.apache.thrift.TBase<matriz, matriz._Fields>, java.io.Serializable, Cloneable, Comparable<matriz> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("matriz");

  private static final org.apache.thrift.protocol.TField FIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fil", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COL_FIELD_DESC = new org.apache.thrift.protocol.TField("col", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DATOS_FIELD_DESC = new org.apache.thrift.protocol.TField("datos", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new matrizStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new matrizTupleSchemeFactory();

  public int fil; // required
  public int col; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<Integer> datos; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIL((short)1, "fil"),
    COL((short)2, "col"),
    DATOS((short)3, "datos");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIL
          return FIL;
        case 2: // COL
          return COL;
        case 3: // DATOS
          return DATOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIL_ISSET_ID = 0;
  private static final int __COL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIL, new org.apache.thrift.meta_data.FieldMetaData("fil", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COL, new org.apache.thrift.meta_data.FieldMetaData("col", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATOS, new org.apache.thrift.meta_data.FieldMetaData("datos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(matriz.class, metaDataMap);
  }

  public matriz() {
  }

  public matriz(
    int fil,
    int col,
    java.util.List<Integer> datos)
  {
    this();
    this.fil = fil;
    setFilIsSet(true);
    this.col = col;
    setColIsSet(true);
    this.datos = datos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public matriz(matriz other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fil = other.fil;
    this.col = other.col;
    if (other.isSetDatos()) {
      java.util.List<Integer> __this__datos = new java.util.ArrayList<Integer>(other.datos);
      this.datos = __this__datos;
    }
  }

  public matriz deepCopy() {
    return new matriz(this);
  }

  @Override
  public void clear() {
    setFilIsSet(false);
    this.fil = 0;
    setColIsSet(false);
    this.col = 0;
    this.datos = null;
  }

  public int getFil() {
    return this.fil;
  }

  public matriz setFil(int fil) {
    this.fil = fil;
    setFilIsSet(true);
    return this;
  }

  public void unsetFil() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIL_ISSET_ID);
  }

  /** Returns true if field fil is set (has been assigned a value) and false otherwise */
  public boolean isSetFil() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIL_ISSET_ID);
  }

  public void setFilIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIL_ISSET_ID, value);
  }

  public int getCol() {
    return this.col;
  }

  public matriz setCol(int col) {
    this.col = col;
    setColIsSet(true);
    return this;
  }

  public void unsetCol() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COL_ISSET_ID);
  }

  /** Returns true if field col is set (has been assigned a value) and false otherwise */
  public boolean isSetCol() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COL_ISSET_ID);
  }

  public void setColIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COL_ISSET_ID, value);
  }

  public int getDatosSize() {
    return (this.datos == null) ? 0 : this.datos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Integer> getDatosIterator() {
    return (this.datos == null) ? null : this.datos.iterator();
  }

  public void addToDatos(int elem) {
    if (this.datos == null) {
      this.datos = new java.util.ArrayList<Integer>();
    }
    this.datos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Integer> getDatos() {
    return this.datos;
  }

  public matriz setDatos(@org.apache.thrift.annotation.Nullable java.util.List<Integer> datos) {
    this.datos = datos;
    return this;
  }

  public void unsetDatos() {
    this.datos = null;
  }

  /** Returns true if field datos is set (has been assigned a value) and false otherwise */
  public boolean isSetDatos() {
    return this.datos != null;
  }

  public void setDatosIsSet(boolean value) {
    if (!value) {
      this.datos = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case FIL:
      if (value == null) {
        unsetFil();
      } else {
        setFil((Integer)value);
      }
      break;

    case COL:
      if (value == null) {
        unsetCol();
      } else {
        setCol((Integer)value);
      }
      break;

    case DATOS:
      if (value == null) {
        unsetDatos();
      } else {
        setDatos((java.util.List<Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIL:
      return getFil();

    case COL:
      return getCol();

    case DATOS:
      return getDatos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIL:
      return isSetFil();
    case COL:
      return isSetCol();
    case DATOS:
      return isSetDatos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof matriz)
      return this.equals((matriz)that);
    return false;
  }

  public boolean equals(matriz that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fil = true;
    boolean that_present_fil = true;
    if (this_present_fil || that_present_fil) {
      if (!(this_present_fil && that_present_fil))
        return false;
      if (this.fil != that.fil)
        return false;
    }

    boolean this_present_col = true;
    boolean that_present_col = true;
    if (this_present_col || that_present_col) {
      if (!(this_present_col && that_present_col))
        return false;
      if (this.col != that.col)
        return false;
    }

    boolean this_present_datos = true && this.isSetDatos();
    boolean that_present_datos = true && that.isSetDatos();
    if (this_present_datos || that_present_datos) {
      if (!(this_present_datos && that_present_datos))
        return false;
      if (!this.datos.equals(that.datos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + fil;

    hashCode = hashCode * 8191 + col;

    hashCode = hashCode * 8191 + ((isSetDatos()) ? 131071 : 524287);
    if (isSetDatos())
      hashCode = hashCode * 8191 + datos.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(matriz other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFil()).compareTo(other.isSetFil());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFil()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fil, other.fil);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol()).compareTo(other.isSetCol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col, other.col);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatos()).compareTo(other.isSetDatos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datos, other.datos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("matriz(");
    boolean first = true;

    sb.append("fil:");
    sb.append(this.fil);
    first = false;
    if (!first) sb.append(", ");
    sb.append("col:");
    sb.append(this.col);
    first = false;
    if (!first) sb.append(", ");
    sb.append("datos:");
    if (this.datos == null) {
      sb.append("null");
    } else {
      sb.append(this.datos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class matrizStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public matrizStandardScheme getScheme() {
      return new matrizStandardScheme();
    }
  }

  private static class matrizStandardScheme extends org.apache.thrift.scheme.StandardScheme<matriz> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, matriz struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fil = iprot.readI32();
              struct.setFilIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.col = iprot.readI32();
              struct.setColIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.datos = new java.util.ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.datos.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDatosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, matriz struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FIL_FIELD_DESC);
      oprot.writeI32(struct.fil);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COL_FIELD_DESC);
      oprot.writeI32(struct.col);
      oprot.writeFieldEnd();
      if (struct.datos != null) {
        oprot.writeFieldBegin(DATOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.datos.size()));
          for (int _iter3 : struct.datos)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class matrizTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public matrizTupleScheme getScheme() {
      return new matrizTupleScheme();
    }
  }

  private static class matrizTupleScheme extends org.apache.thrift.scheme.TupleScheme<matriz> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, matriz struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFil()) {
        optionals.set(0);
      }
      if (struct.isSetCol()) {
        optionals.set(1);
      }
      if (struct.isSetDatos()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFil()) {
        oprot.writeI32(struct.fil);
      }
      if (struct.isSetCol()) {
        oprot.writeI32(struct.col);
      }
      if (struct.isSetDatos()) {
        {
          oprot.writeI32(struct.datos.size());
          for (int _iter4 : struct.datos)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, matriz struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.fil = iprot.readI32();
        struct.setFilIsSet(true);
      }
      if (incoming.get(1)) {
        struct.col = iprot.readI32();
        struct.setColIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.datos = new java.util.ArrayList<Integer>(_list5.size);
          int _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI32();
            struct.datos.add(_elem6);
          }
        }
        struct.setDatosIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

